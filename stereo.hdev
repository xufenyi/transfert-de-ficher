* Application program to demonstrate the calibration of
* a binocular stereo system using the operators
* find_caltab, find_marks_and_pose, and binocular_calibration.
* 
* As an alternative, a calibration data model could be used.
* Please refer to the example program
* examples/solution_guide/3d_vision/stereo_calibration.hdev.
* 
* We have a stereo setup of two cameras ('camera1 is left of camera2').
* Both cameras will be calibrated by a couple of images of
* a 30mm calibration plate. An image pair will be rectified
* to epipolar images and the epipolar constraint will be checked.
* ---------------------------------------------------------
* Set the image path
ImgPath := 'C:/Users/x50043188/Desktop/Round3/'
CaltabFile := 'C:/Users/x50043188/Desktop/Round1/caltab.descr'

* Read the first images to get their size
Index := 1
read_image (ImageL, ImgPath + 'left_' + Index$'02d' + '.jpg')
read_image (ImageR, ImgPath + 'right_' + Index$'02d' + '.jpg')
* Reopen the windows with an appropriate size
dev_close_window ()
dev_update_off ()
get_image_size (ImageL, WidthL, HeightL)
dev_open_window (0, 0, WidthL/8, HeightL/8, 'black', WindowHandle1)
dev_set_draw ('margin')
dev_set_color ('green')
set_display_font (WindowHandle1, 14, 'mono', 'true', 'false')
get_image_size (ImageR, WidthR, HeightR)
dev_open_window (0, WidthL/8 + 12, WidthL/8, HeightL/8, 'black', WindowHandle2)
dev_set_draw ('margin')
dev_set_color ('green')
* Read the model calibration points.

caltab_points (CaltabFile, X, Y, Z)
* Set the initial values for the internal camera parameters
gen_cam_par_area_scan_division (0.05, 0, 1.48e-5, 1.48e-5, WidthL / 2.0, HeightL / 2.0, WidthL, HeightL, StartCamParL)
StartCamParR := StartCamParL
* Parameter settings for find_caltab and find_marks_and_pose
SizeGauss := 3
MarkThresh := 120
MinDiamMarks := 5
StartThresh := 148
DeltaThresh := 20
MinThresh := 5
Alpha := 0.9
MinContLength := 15
MaxDiamMarks := 100
* Create the tuples in which the image coordinates of the
* calibration marks and the initial poses will be accumulated
RowsL := []
ColsL := []
StartPosesL := []
RowsR := []
ColsR := []
StartPosesR := []
* Start the loop over the calibration images
for Index := 1 to 12 by 1
    * Display calibration plate regions
    dev_set_window (WindowHandle1)
    * Read the calibration images
    read_image (ImageL_source, ImgPath + 'left_' + Index$'02d' + '.jpg')  
    * Enhance the contrast
    scale_image (ImageL_source, ImageL, 2, -50)
    * Search for the calibration plate
    find_caltab (ImageL, CaltabL, CaltabFile, SizeGauss, MarkThresh, MinDiamMarks)
    dev_display (ImageL)
    dev_display (CaltabL)
    
    dev_set_window (WindowHandle2)
    read_image (ImageR_source, ImgPath + 'right_' + Index$'02d' + '.jpg')
    scale_image (ImageR_source, ImageR, 2, -50)
    find_caltab (ImageR, CaltabR, CaltabFile, SizeGauss, MarkThresh, MinDiamMarks)
    dev_display (ImageR)
    dev_display (CaltabR)
    
    * Extraction of marks and pose as well as visualization of the
    * results for the second image.
    find_marks_and_pose (ImageL, CaltabL, CaltabFile, StartCamParL, StartThresh, DeltaThresh, MinThresh, Alpha, MinContLength, MaxDiamMarks, RCoordL, CCoordL, StartPoseL)
    disp_caltab (WindowHandle1, CaltabFile, StartCamParL, StartPoseL, 1)
    * Extraction of marks and pose as well as visualization of the
    * results for the second image.
    find_marks_and_pose (ImageR, CaltabR, CaltabFile, StartCamParR, StartThresh, DeltaThresh, MinThresh, Alpha, MinContLength, MaxDiamMarks, RCoordR, CCoordR, StartPoseR)
    disp_caltab (WindowHandle2, CaltabFile, StartCamParR, StartPoseR, 1)
    * Accumulate the image coordinates of the calibration marks
    * as well as the estimated initial poses for all stereo pairs,
    * where the poses has been estimated consistently.
    RowsL := [RowsL,RCoordL]
    ColsL := [ColsL,CCoordL]
    StartPosesL := [StartPosesL,StartPoseL]
    RowsR := [RowsR,RCoordR]
    ColsR := [ColsR,CCoordR]
    StartPosesR := [StartPosesR,StartPoseR]
endfor
* Perform the actual calibration
binocular_calibration (X, Y, Z, RowsL, ColsL, RowsR, ColsR, StartCamParL, StartCamParR, StartPosesL, StartPosesR, 'all', CamParamL, CamParamR, NFinalPoseL, NFinalPoseR, cLPcR, Errors)
* If required, save the results to disk:
write_cam_par (CamParamL, 'cam_left-125.dat')
write_cam_par (CamParamR, 'cam_right-125.dat')
write_pose (cLPcR, 'pos_right2left.dat')
* Generate the rectification maps
gen_binocular_rectification_map (MapL, MapR, CamParamL, CamParamR, cLPcR, 1, 'viewing_direction', 'bilinear', RectCamParL, RectCamParR, CamPoseRectL, CamPoseRectR, RectLPosRectR)
* Read in a stereo image pair, acquired with the stereo camera system,
* which has been calibrated, just now.
read_image (ImageL, ImgPath + 'left_01.jpg')
read_image (ImageR, ImgPath + 'right_01.jpg')
* Rectify the stereo images and display them
map_image (ImageL, MapL, ImageRectifiedL)
map_image (ImageR, MapR, ImageRectifiedR)
* Check the epipolar constraint on the rectified images,
* (the differences of the features' row coordinates should be small)
* and visualize the result (including some corresponding epipolar lines)
check_epipolar_constraint (ImageRectifiedL, ImageRectifiedR, RectCamParL, RectCamParR, WindowHandle1, WindowHandle2, CaltabFile, EpipolarError)






dev_close_window ()
dev_update_off ()
dev_set_preferences ('graphics_window_context_menu', 'false')
dev_set_preferences ('suppress_handled_exceptions_dlg', 'true')
* 
* 定义要选择的左右图像对
Image1 := '‪C:/Users/x50043188/Desktop/Object/left_01.jpg'
Image2 := '‪C:/Users/x50043188/Desktop/Object/right_01.jpg'
* 
* 生成视差图
* ******************************************
* 
* 生成校正映射图像对
gen_binocular_rectification_map (MapL, MapR, CamParamL, CamParamR, cLPcR, 1, 'geometric', 'bilinear', RectCamParL, RectCamParR, CamPoseRectL, CamPoseRectR, RectLPosRectR)
* 
* 读取原图像对并进行校正，得到校正后的图像对
read_image (ImageL, 'C:/Users/x50043188/Desktop/Object/left_02.jpg')
read_image (ImageR, 'C:/Users/x50043188/Desktop/Object/right_02.jpg')
map_image (ImageL, MapL, ImageRectifiedL)
map_image (ImageR, MapR, ImageRectifiedR)
* 
* 显示校正后的左侧图像
get_image_size (ImageRectifiedL, WidthL, HeightL)
dev_open_window (0, 0, 0.4*WidthL,0.4* HeightL, 'black', WindowHandle1)
set_display_font (WindowHandle1, 11, 'mono', 'true', 'false')
dev_display (ImageRectifiedL)
disp_message (WindowHandle1, 'Left rectified image', 'window', 10, 10, 'black', 'true')
* 
* 显示校正后的右侧图像
dev_open_window (0, 0.4*WidthL + 10, 0.4*WidthL, 0.4*HeightL, 'black', WindowHandle2)
set_display_font (WindowHandle2, 11, 'mono', 'true', 'false')
dev_display (ImageRectifiedL)
disp_message (WindowHandle2, 'Right rectified image', 'window', 10, 10, 'black', 'true')
disp_continue_message (WindowHandle2, 'black', 'true')
binocular_disparity (ImageRectifiedL, ImageRectifiedR, DisparityImage, Score, 'ncc', 15, 15, 0, 0, 10, 1, 0.8, 'none', 'none')
* 
* 填充视差图中的缺陷
get_domain (DisparityImage, RegionInpainting)
complement (RegionInpainting, RegionInpainting)
full_domain (DisparityImage, DisparityImage)
harmonic_interpolation (DisparityImage, RegionInpainting, DisparityImage, 0.01)



* 显示视差图
dev_set_window (WindowHandle1)
* dev_set_lut ('temperature')
dev_display (RegionInpainting)
disp_message (WindowHandle1, 'Disparity image', 'window', 10, 10, 'black', 'true')
